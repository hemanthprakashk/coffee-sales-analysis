DROP TABLE IF EXISTS coffee_sales;
CREATE TABLE coffee_sales (
	transaction_id int,
	transaction_date varchar,
	transaction_time varchar,
	transaction_qty float,
	store_id int,
	store_location varchar,
	product_id float,
	unit_price varchar,
	product_category varchar,
	product_type varchar,
	product_detail varchar
);
SELECT * FROM coffee_sales;

SELECT COLUMN_NAME,data_type
FROM information_schema.columns
WHERE TABLE_NAME = 'coffee_sales';

--DATA CLEANING 
-- for transaction qty, product_id are double precision to int
-- for unit_price is character varying to float
-- for transaction_time, transaction_date also in character change to time, date format
ALTER TABLE coffee_sales
ALTER COLUMN transaction_qty
TYPE integer
USING transaction_qty::integer;

ALTER TABLE coffee_sales
ALTER COLUMN product_id 
TYPE integer
USING product_id::integer;

SELECT DISTINCT unit_price
FROM coffee_sales;

ALTER TABLE coffee_sales
ALTER COLUMN unit_price 
TYPE real
USING unit_price::real;

SELECT DISTINCT transaction_date
FROM coffee_sales
LIMIT 5;

ALTER TABLE coffee_sales
ALTER COLUMN transaction_date
TYPE date
USING to_date(transaction_date,'MM-DD-YYYY');

SELECT DISTINCT transaction_time
FROM coffee_sales LIMIT 10;

ALTER TABLE coffee_sales
ALTER COLUMN transaction_time 
TYPE time
USING transaction_time::time;

SELECT COLUMN_NAME , data_type
FROM information_schema.columns
WHERE TABLE_NAME='coffee_sales'
ORDER BY COLUMN_NAME;

-- now starts with the data explorations
--checking each columns whether they are having null values or not
SELECT COUNT(*)
FROM coffee_sales
WHERE transaction_id IS NULL;

SELECT COUNT(*) FROM coffee_sales
WHERE transaction_date IS NULL ;

SELECT COUNT(*) FROM coffee_sales
WHERE transaction_time IS NULL;

SELECT COUNT(*) FROM coffee_sales
WHERE transaction_qty IS NULL;

SELECT AVG(transaction_qty) FROM coffee_sales;
SELECT DISTINCT transaction_qty FROM coffee_sales;

UPDATE coffee_sales
SET transaction_qty = 
(SELECT ROUND(AVG(transaction_qty)) FROM coffee_sales 
WHERE transaction_qty IS NOT NULL)
WHERE transaction_qty IS NULL;

	
SELECT COUNT(*) FROM coffee_sales
WHERE store_id IS NULL;

SELECT COUNT(*) FROM coffee_sales 
WHERE store_location IS NULL;

UPDATE coffee_sales
SET store_location = (SELECT store_location FROM coffee_sales
WHERE store_location IS NOT NULL
GROUP BY store_location
ORDER BY COUNT(*) DESC LIMIT 1)
WHERE store_location IS NULL;

SELECT COUNT(*) FROM coffee_sales WHERE product_id IS NULL;

UPDATE coffee_sales 
SET product_id = (SELECT product_id FROM coffee_sales
WHERE product_id IS NOT NULL
GROUP BY product_id
ORDER BY COUNT(*) DESC LIMIT 1)
WHERE product_id IS NULL;

SELECT COUNT(*) FROM coffee_sales WHERE unit_price IS NULL;

UPDATE coffee_sales 
SET unit_price =(
SELECT ROUND(AVG(unit_price)::numeric,2) FROM coffee_sales 
WHERE unit_price IS NOT NULL )
WHERE unit_price IS NULL;

SELECT COUNT(*) FROM coffee_sales WHERE product_type IS NULL;

SELECT COUNT(*) FROM coffee_sales WHERE product_category IS NULL;

UPDATE coffee_sales
SET product_category = (
SELECT product_category FROM coffee_sales 
WHERE product_category IS NOT NULL
GROUP BY product_category
ORDER BY COUNT(*) DESC LIMIT 1)
WHERE product_category IS NULL ;

SELECT COUNT(*) FROM coffee_sales WHERE product_detail IS NULL;

--SALES ANALYSIS
--1) What is the total revenue generated by the store?
SELECT SUM(transaction_qty * unit_price) AS total_revenue
FROM coffee_sales;

--2) How many transaction occured each day
SELECT transaction_date, SUM(transaction_qty) AS total_transaction
FROM coffee_sales
GROUP BY transaction_date
ORDER BY transaction_date;

--3) Which product generated highest revenue overall
SELECT product_id , SUM(transaction_qty * unit_price) AS total_revenue
FROM coffee_sales
GROUP BY product_id
ORDER BY total_revenue DESC LIMIT 1;

--4) At what hour of the day is coffee shop most busy
SELECT EXTRACT(HOUR FROM transaction_time ) AS transaction_hour,
SUM(transaction_qty) AS total_transaction
FROM coffee_sales
GROUP BY transaction_hour
ORDER BY total_transaction DESC LIMIT 1;

--5) How does daily revenue trend over time
SELECT transaction_date, SUM(transaction_qty*unit_price) AS total_revenue
FROM coffee_sales 
GROUP BY transaction_date
ORDER BY transaction_date;

--6) Which product category sells the most units?
SELECT product_category, SUM(transaction_qty) AS total_units
FROM coffee_sales
GROUP BY product_category
ORDER BY total_units DESC LIMIT 5 ;

--7) What are the top-3 selling product types interms of quantity
SELECT product_type, SUM(transaction_qty) AS total_transactions
FROM coffee_sales
GROUP BY product_type
ORDER BY total_transactions DESC LIMIT 3;

--8) Which store location has the highest revenue?
SELECT store_location, SUM(transaction_qty * unit_price) AS total_revenue
FROM coffee_sales 
GROUP BY store_location
ORDER BY total_revenue DESC;

--9) Compare average spending per transaction across locations
SELECT store_location, AVG(transaction_qty * unit_price) AS avg_spending
FROM coffee_sales
GROUP BY store_location
ORDER BY store_location;

--10) Identify the top-5 highest revenue generating product-location pairs
SELECT product_id , store_location , SUM(transaction_qty*unit_price) AS total_revenue
FROM coffee_sales 
GROUP BY (product_id, store_location)
ORDER BY total_revenue DESC LIMIT 5;

--11) Which product generated revenue higher than average product revenue?
SELECT product_id , AVG(transaction_qty * unit_price) AS avg_revenue
FROM coffee_sales 
GROUP BY product_id 
HAVING AVG(transaction_qty * unit_price ) > 
( SELECT AVG(transaction_qty * unit_price) AS avg_revenue 
	FROM coffee_sales)
;

--12) List the dates where the daily transactions was in the top 10 overall.
SELECT transaction_date FROM coffee_sales
WHERE transaction_date IN
(SELECT transaction_date FROM coffee_sales 
GROUP BY transaction_date  ORDER BY SUM(transaction_qty) DESC LIMIT 10);

/* 13) What are the details of the product that belong to the category 
 with highest sales volume */
SELECT DISTINCT product_detail FROM coffee_sales
WHERE product_id IN 
( SELECT product_id  
  FROM coffee_sales
  GROUP BY product_id 
  ORDER BY SUM(transaction_qty) DESC LIMIT 1);

/* 14) Find the top 10 transactions where quantity is greater than average
quantity of that product */
SELECT * FROM coffee_sales AS t1
WHERE t1.transaction_qty > (
	SELECT AVG(transaction_qty) FROM coffee_sales AS t2 
	WHERE t1.product_id = t2.product_id
) LIMIT 10;

CREATE TABLE avg_transaction_qty AS
SELECT product_id , ROUND(AVG(transaction_qty),2) AS avg_qty 
FROM coffee_sales 
GROUP BY product_id;

SELECT * FROM coffee_sales AS t1
WHERE transaction_qty > ( 
	SELECT avg_qty FROM avg_transaction_qty AS t2
    WHERE t1.product_id = t2.product_id);

/* 15) For each product, show its total revenue only if that revenue is 
the highest among all products of same category */

SELECT product_id , product_category , total_revenue
FROM (
	SELECT product_id , product_category, SUM(transaction_qty * unit_price) AS total_revenue,
	RANK() OVER ( PARTITION BY product_category ORDER BY
	SUM(transaction_qty * unit_price ) DESC) AS rnk
	FROM coffee_sales GROUP BY product_id , product_category
	) AS ranked
WHERE rnk=1 ORDER BY product_id;

/* 16) List each store's transactions where the unit price is greater than 
average unit price for that same store */
SELECT * FROM coffee_sales t1
JOIN(
	SELECT store_id , AVG(unit_price) AS avg_price
	FROM coffee_sales GROUP BY store_id
) t2
ON t1.store_id = t2.store_id
WHERE t1.unit_price > t2.avg_price
ORDER BY t1.store_id,t1.unit_price;

